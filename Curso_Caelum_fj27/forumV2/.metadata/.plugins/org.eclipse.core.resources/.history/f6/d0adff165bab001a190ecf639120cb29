package br.com.alura.forum.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;

public class JwtAuthenticationFilter extends OncePerRequestFilter{

	@Override
	protected void doFilterInternal(HttpServletRequest	request,	HttpServletResponse	response,	
			FilterChain	chain) throws ServletException, IOException {
		String	jwt	=	getTokenFromRequest(request);
		chain.doFilter(request,	response);
	}
	
	private	String	getTokenFromRequest(HttpServletRequest	request) {
		String	bearerToken	=	request.getHeader("Authorization");
		
		if (StringUtils.hasText(bearerToken) &&	bearerToken.startsWith("Bearer	"))
			return bearerToken.substring(7, bearerToken.length());
		
		return null;
	}
	
	public	boolean	isValid(String	jwt) {
		
		try	{ 
			Jwts.parser().setSigningKey(this.secret).parseClaimsJws(jwt);
				return true;
				} 
		catch	(JwtException |	IllegalArgumentException e)	{
			return false;
			}
	}
	
	public	Long	getUserIdFromToken(String	jwt) {
		Claims	claims	=	Jwts.parser().setSigningKey(this.secret)
				.parseClaimsJws(jwt).getBody();
		return	Long.parseLong(claims.getSubject());
	}

}
