package br.com.alura.forum.security.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.BeanIds;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	private UserDetailsService userService;
	
	/*
	 * AUTENTICAÇÃO EM MEMÓRIA
	 * 
	 * @Override protected void configure(AuthenticationManagerBuilder auth) throws
	 * Exception {
	 * 
	 * auth.userDetailsService(userService) .passwordEncoder(new
	 * BCryptPasswordEncoder());
	 * 
	 * auth.inMemoryAuthentication() .withUser("alberto") .password(new
	 * BCryptPasswordEncoder().encode("123456")) .authorities("ROLE_ADMIN") .and()
	 * .withUser("rafael") .password(new BCryptPasswordEncoder().encode("123456"))
	 * .authorities("ROLE_USER") .and() .passwordEncoder(new
	 * BCryptPasswordEncoder()); }
	 * 
	 * }
	 * 
	 * AUTENTICAÇÃO USUÁRIO GRAVADO EM BANCO DE DADOS
	 * 
	 * @Override protected void configure(HttpSecurity http) throws Exception {
	 * http.authorizeRequests() .antMatchers(HttpMethod.GET,
	 * "/api/topics/**").permitAll() .anyRequest().authenticated()
	 * .and().formLogin() .and().httpBasic(); }
	 */	
	
	//AUTENTICAÇÃO JWT
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
			.antMatchers(HttpMethod.GET, "/api/topics/**").permitAll()
			.antMatchers("/api/auth/**").permitAll()
			.anyRequest().authenticated()
			.and().cors()
			.and().csrf().disable()
			.sessionManagement()
			.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	}	
	
	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers("/**.html", "/v2/api-docs", "/webjars/**", "/configuration/**",
				"/swagger-resources/**");
	}	
	
	@Override
	@Bean(BeanIds.AUTHENTICATION_MANAGER)
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}
}
